#ifndef MATERIAL_H
#define MATERIAL_H

class Material;

#include <string>
#include <GL/gl.h>
#include "intensity.hpp"
#include "texture.hpp"

class Texture;
class Scene;

using namespace std;

/** 
 * Classe de base représentant un matériau. 
 * Un matériau est définit par son comportement lumineux, c'est à dire la 
 * mani&egrave;re dont il réfléchi la lumière. 
 *
 * @author	Christophe Cassagnabère modifié par Flavien Bridault
 * @see Intensity
 */
class Material 
{
private:
  string m_name;   /** Nom du matériau. */
  Intensity m_Kd;  /**Composante de réflexion diffuse.*/
  Intensity m_Ks;  /**Composante de réflexion spéculaire.*/
  double m_Kss;    /**Indice de tache spéculaire*/
  Intensity m_Ka;  /**Composante de réflexion ambiante.*/
  
  Scene *m_scene; /** Pointeur vers la scène, utilisé pour récupérer les textures. */
  int m_diffuseTexture;  /** Indice de la texture diffuse dans la scène. -1 si le matériau n'est pas texturé. */
public:
  /**
   * Constructeur par défaut. Crée un matériau blanc ambiant.
   */
  Material( Scene * const scene );
  /**
   * Constructeur.
   * @param name Nom donné au matériau.
   * @param ambientCoefficients	Composante de réflexion ambiante.
   * @param diffuseCoefficients	Composante de réflexion diffuse.
   * @param specularCoefficients Composante de réflexion spéculaire.
   * @param specularExponent Indice de tache spéculaire.
   * @param tex Pointeur optionel sur la texture.
   */
  Material( Scene * const scene, const string& name, double* const ambientCoefficients, double* const diffuseCoefficients, double* const specularCoefficients, double specularExponent=0.0, int tex=-1);
  /** Destructeur par défaut. */
  ~Material(){};
  
  /** Retourne le nom du matériau.
   * @return Nom du matériau.
   */
  const string *getName() const
  { return &m_name;};
  
  /* Lecture de la composante spéculaire. 
   * @return Une variable de type Intensity.
   */
  Intensity getSpecularCoefficients() const
  { return (m_Ks);};
  
  /** Lecture de la composante diffuse. 
   * @return Une variable de type Intensity.
   */  
  Intensity getDiffuseCoefficients() const
  { return (m_Kd);};
  
  /** Lecture de la composante ambiante. 
   * @return Une variable de type Intensity.
   */ 
  const Intensity& getAmbientCoefficients() const
  { return (m_Ka); };
  
  /** Applique le matériau avec glMaterial(). */ 
  void apply () const;
  
  /** Indique si le matériau possède une texture.
   * @return True si le matériau a une texture.
   */
  const bool hasDiffuseTexture() const
  { return (m_diffuseTexture!=-1);};

  /** Retourne un pointeur sur la texture du matériau.
   * @return Pointeur sur la texture
   */
  const Texture* getDiffuseTexture() const;
};

#endif
